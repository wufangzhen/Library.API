<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library.API</name>
    </assembly>
    <members>
        <member name="M:Library.API.Controllers.AuthenticateController.AddUserAsync(Library.API.Models.RegisterUser)">
            
        </member>
        <member name="M:Library.API.Controllers.AuthorController.CreateAuthorAsync(Library.API.Models.AuthorForCreationDto)">
            <summary>
            添加一个作者
            </summary>
            <param name="authorForCreationDto">作者</param>
            <remarks>
            添加作者的请求：        
            
                POST api/authors
                {
                    "name" : "Author1",
                    "birthplace" : "Beijing",
                    "dateOfBirth" : "1980/1/1",
                    "email" : "xxx@xxx.com"
                }
            </remarks>
            <returns>添加结果</returns>
            <response code="201">返回新创建的资源</response>
            <response code="400">提交请求时的信息不正确</response>
        </member>
        <member name="M:Library.API.Helpers.SignalRHub.OnConnectedAsync">
            <summary>
            客户连接成功时触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsHandler.OnConnected(System.Net.WebSockets.WebSocket)">
            <summary>
            连接一个 socket
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsHandler.OnDisconnected(System.Net.WebSockets.WebSocket)">
            <summary>
            断开指定 socket
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsHandler.SendMessage(System.Net.WebSockets.WebSocket,System.String)">
            <summary>
            发送消息给指定 socket
            </summary>
            <param name="socket"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsHandler.SendMessage(System.String,System.String)">
            <summary>
            发送消息给指定 id 的 socket
            </summary>
            <param name="id"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsHandler.SendMessageToAll(System.String)">
            <summary>
            给所有 sockets 发送消息
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsHandler.Receive(System.Net.WebSockets.WebSocket,System.Net.WebSockets.WebSocketReceiveResult,System.Byte[])">
            <summary>
            接收到消息
            </summary>
            <param name="socket"></param>
            <param name="result"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsManager.GetAllConnections">
            <summary>
            获取所有 sockets 的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsManager.GetSocketById(System.String)">
            <summary>
                获取指定 id 的 socket
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsManager.GetId(System.Net.WebSockets.WebSocket)">
            <summary>
            根据 socket 获取其 id
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsManager.RemoveSocketAsync(System.String)">
            <summary>
            删除指定 id 的 socket，并关闭该链接
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsManager.AddSocket(System.Net.WebSockets.WebSocket)">
            <summary>
            添加一个 socket
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Library.API.SocketsManager.SocketsManager.CreateId">
            <summary>
            创建 id
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
